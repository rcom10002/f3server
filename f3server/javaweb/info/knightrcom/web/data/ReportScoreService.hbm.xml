<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
	<hibernate-mapping>
	<sql-query name="INSERT_PERIODLY_SUM">
	<![CDATA[
		INSERT INTO PERIODLY_SUM(
		PERIODLY_ID,
		TITLE,
		PROFILE_ID, 
		TOTAL_TIMES,
		TOTAL_SCORES,
		WIN_TIMES,
		WIN_SCORES,
		LOSE_TIMES,
		LOSE_SCORES,
		DRAW_TIMES,
		DRAW_SCORES,
		TOTAL_SYSTEM_SCORE,
		START_DATE,
		END_DATE,
		CREATE_DATE,
		UPDATE_DATE,
		CREATE_BY,
		UPDATE_BY
		) 
			SELECT UUID(),current_date ||'积分统计', PLAYER_PROFILE.PROFILE_ID,
              CASE
              WHEN TOTAL_SUM.TIMES IS NULL THEN 0
              ELSE TOTAL_SUM.TIMES
              END totalTimes,
              CASE
              WHEN TOTAL_SUM.SCORES IS NULL THEN 0
              ELSE TOTAL_SUM.SCORES
              END totalScores,
			  CASE
              WHEN WIN_SUM.TIMES IS NULL THEN 0
              ELSE WIN_SUM.TIMES
              END winTimes,
              CASE
              WHEN WIN_SUM.SCORES IS NULL THEN 0
              ELSE WIN_SUM.SCORES
              END winScores,
              CASE
              WHEN LOSE_SUM.TIMES IS NULL THEN 0
              ELSE LOSE_SUM.TIMES
              END loseTimes,
              CASE
              WHEN LOSE_SUM.SCORES IS NULL THEN 0
              ELSE LOSE_SUM.SCORES
              END loseScores,
              CASE
              WHEN DRAW_SUM.TIMES IS NULL THEN 0
              ELSE DRAW_SUM.TIMES
              END drawTimes,
              CASE
              WHEN DRAW_SUM.SCORES IS NULL THEN 0
              ELSE DRAW_SUM.SCORES
              END drawScores,
              CASE
              WHEN TOTAL_SUM.SYS_SCORE IS NULL THEN 0
              ELSE TOTAL_SUM.SYS_SCORE
              END totalSysScore,
              ? fromTime, ? toTime,
              CURRENT_DATE, CURRENT_DATE, ?, ?
			  FROM PLAYER_PROFILE LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES, SUM(SYSTEM_SCORE) SYS_SCORE
			  FROM PLAYER_SCORE
        	WHERE PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) TOTAL_SUM ON PLAYER_PROFILE.PROFILE_ID = TOTAL_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE > 0
       			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) WIN_SUM ON PLAYER_PROFILE.PROFILE_ID = WIN_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE < 0
         		AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) LOSE_SUM ON PLAYER_PROFILE.PROFILE_ID = LOSE_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE = 0
     			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) DRAW_SUM ON PLAYER_PROFILE.PROFILE_ID = DRAW_SUM.PROFILE_ID
			WHERE (UPPER(PLAYER_PROFILE.USER_ID) LIKE UPPER(?) OR ? IS NULL)
    ]]>
	</sql-query>
	<sql-query name="REPORT_SCORE_INFO">
	<![CDATA[
			SELECT USER_ID userId,
              CASE
              WHEN TOTAL_SUM.TIMES IS NULL THEN 0
              ELSE TOTAL_SUM.TIMES
              END totalTimes,
              CASE
              WHEN TOTAL_SUM.SCORES IS NULL THEN 0
              ELSE TOTAL_SUM.SCORES
              END totalScores,
			  CASE
              WHEN WIN_SUM.TIMES IS NULL THEN 0
              ELSE WIN_SUM.TIMES
              END winTimes,
              CASE
              WHEN WIN_SUM.SCORES IS NULL THEN 0
              ELSE WIN_SUM.SCORES
              END winScores,
              CASE
              WHEN LOSE_SUM.TIMES IS NULL THEN 0
              ELSE LOSE_SUM.TIMES
              END loseTimes,
              CASE
              WHEN LOSE_SUM.SCORES IS NULL THEN 0
              ELSE LOSE_SUM.SCORES
              END loseScores,
              CASE
              WHEN DRAW_SUM.TIMES IS NULL THEN 0
              ELSE DRAW_SUM.TIMES
              END drawTimes,
              CASE
              WHEN DRAW_SUM.SCORES IS NULL THEN 0
              ELSE DRAW_SUM.SCORES
              END drawScores,
              CASE
              WHEN TOTAL_SUM.SYS_SCORE IS NULL THEN 0
              ELSE TOTAL_SUM.SYS_SCORE
              END totalSysScore,
              ? fromTime, ? toTime
			  FROM PLAYER_PROFILE LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES, SUM(SYSTEM_SCORE) SYS_SCORE
			  FROM PLAYER_SCORE
        	WHERE PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) TOTAL_SUM ON PLAYER_PROFILE.PROFILE_ID = TOTAL_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE > 0
       			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) WIN_SUM ON PLAYER_PROFILE.PROFILE_ID = WIN_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE < 0
         		AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) LOSE_SUM ON PLAYER_PROFILE.PROFILE_ID = LOSE_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE = 0
     			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) DRAW_SUM ON PLAYER_PROFILE.PROFILE_ID = DRAW_SUM.PROFILE_ID
			WHERE (UPPER(PLAYER_PROFILE.USER_ID) LIKE UPPER(?) OR ? IS NULL)
    ]]>
	</sql-query>
	<sql-query name="REPORT_SCORE_INFO_COUNT">
	<![CDATA[
		SELECT COUNT(*) RECORD_COUNT,
              ? fromTime, ? toTime
			  FROM PLAYER_PROFILE LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES, SUM(SYSTEM_SCORE) SYS_SCORE
			  FROM PLAYER_SCORE
        	WHERE PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) TOTAL_SUM ON PLAYER_PROFILE.PROFILE_ID = TOTAL_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE > 0
       			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) WIN_SUM ON PLAYER_PROFILE.PROFILE_ID = WIN_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE < 0
         		AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) LOSE_SUM ON PLAYER_PROFILE.PROFILE_ID = LOSE_SUM.PROFILE_ID LEFT OUTER JOIN (
			SELECT PROFILE_ID, COUNT(SCORE) TIMES, SUM(SCORE) SCORES
			  FROM PLAYER_SCORE
			 WHERE SCORE = 0
     			AND PLAYER_SCORE.CREATE_TIME BETWEEN ? AND DATE_ADD(?, INTERVAL 1 DAY)
			 GROUP BY PROFILE_ID
			) DRAW_SUM ON PLAYER_PROFILE.PROFILE_ID = DRAW_SUM.PROFILE_ID
			WHERE (UPPER(PLAYER_PROFILE.USER_ID) LIKE UPPER(?) OR ? IS NULL)
    ]]>
	</sql-query>
</hibernate-mapping>
